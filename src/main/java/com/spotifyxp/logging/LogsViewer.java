package com.spotifyxp.logging;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.spotifyxp.PublicValues;
import com.spotifyxp.ctxmenu.ContextMenu;
import com.spotifyxp.swingextension.AnsiArea;
import com.spotifyxp.swingextension.JFrame;
import org.apache.commons.io.FilenameUtils;
import org.apache.commons.io.IOUtils;

import javax.swing.*;
import java.awt.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.*;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.*;


public class LogsViewer extends JFrame {
    public JList<String> logsList;
    public JPanel contentPanel;
    public JTabbedPane tabs;
    public AnsiArea ansiArea;
    public JLabel info;

    private ArrayList<File> logs = new ArrayList<>();
    private ContextMenu contextMenu;

    public LogsViewer() {
        $$$setupUI$$$();
        setContentPane(contentPanel);

        setTitle(PublicValues.language.translate("logsviewer.title"));

        info.setText(PublicValues.language.translate("logsviewer.info"));

        contextMenu = new ContextMenu();
        contextMenu.addItem(PublicValues.language.translate("ui.general.refresh"), new Runnable() {
            @Override
            public void run() {
                logs.clear();
                ((DefaultListModel<String>) logsList.getModel()).setSize(0);
                loadLogs();
            }
        });

        logsList.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                if (SwingUtilities.isRightMouseButton(e)) {
                    contextMenu.showAt(logsList, getX(), getY());
                } else if (e.getClickCount() == 2) {
                    new Thread(() -> {
                        tabs.setSelectedIndex(1);
                        ansiArea.setText("");
                        try {
                            BufferedReader reader = new BufferedReader(new InputStreamReader(Files.newInputStream(logs.get(tabs.getSelectedIndex()).toPath())));
                            reader.lines().forEach(line -> {
                                ansiArea.parse(line + "\n");
                            });
                        } catch (IOException ex) {
                            throw new RuntimeException(ex);
                        }
                    }, "Parse log file").start();
                }
            }
        });
        logsList.setModel(new DefaultListModel<>());

        tabs.setTitleAt(0, PublicValues.language.translate("logsviewer.tab1"));
        tabs.setTitleAt(1, PublicValues.language.translate("logsviewer.tab2"));
    }

    private void loadLogs() {
        File[] files = Objects.requireNonNull(new File(PublicValues.fileslocation, "logs").listFiles(new FilenameFilter() {
            @Override
            public boolean accept(File dir, String name) {
                return name.toLowerCase(Locale.ENGLISH).endsWith(".log");
            }
        }));
        Arrays.sort(files, Comparator.comparing(f -> LocalDateTime.parse(f.getName().replace(".log", ""), DateTimeFormatter.ofPattern("yyyy-MM-dd_HH-mm-ss"))));
        for (File log : files) {
            ((DefaultListModel<String>) logsList.getModel()).addElement(FilenameUtils.removeExtension(log.getName()));
            logs.add(log);
        }
    }

    private void createUIComponents() {
        ansiArea = new AnsiArea();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        createUIComponents();
        contentPanel = new JPanel();
        contentPanel.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        contentPanel.setMinimumSize(new Dimension(640, 480));
        contentPanel.setPreferredSize(new Dimension(640, 480));
        tabs = new JTabbedPane();
        contentPanel.add(tabs, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, new Dimension(200, 200), null, 0, false));
        final JScrollPane scrollPane1 = new JScrollPane();
        tabs.addTab("Untitled", scrollPane1);
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));
        scrollPane1.setViewportView(panel1);
        logsList = new JList();
        panel1.add(logsList, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(150, 50), null, 0, false));
        info = new JLabel();
        info.setText("Label");
        panel1.add(info, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        tabs.addTab("Untitled", panel2);
        final JScrollPane scrollPane2 = new JScrollPane();
        panel2.add(scrollPane2, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        scrollPane2.setViewportView(ansiArea);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return contentPanel;
    }


    @Override
    public void open() {
        loadLogs();
        super.open();
    }
}
