/*
 * Copyright [2025] [Gianluca Beil]
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.spotifyxp.dialogs;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import com.spotifyxp.PublicValues;
import com.spotifyxp.deps.se.michaelthelin.spotify.model_objects.specification.Paging;
import com.spotifyxp.deps.se.michaelthelin.spotify.model_objects.specification.PlaylistSimplified;
import com.spotifyxp.logging.ConsoleLogging;
import com.spotifyxp.manager.InstanceManager;
import com.spotifyxp.swingextension.JDialog;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.IOException;
import java.util.ArrayList;

public class SelectPlaylist extends JDialog {
    public JPanel contentPanel;
    public JButton okButton;
    public JButton cancelButton;
    public JLabel selectPlaylistLabel;
    public JComboBox playlistList;

    private ArrayList<String> uris;
    private boolean loadplaylists = true;

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        contentPanel = new JPanel();
        contentPanel.setLayout(new GridLayoutManager(4, 3, new Insets(10, 10, 10, 10), -1, -1));
        cancelButton = new JButton();
        cancelButton.setText("Button");
        contentPanel.add(cancelButton, new GridConstraints(3, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        okButton = new JButton();
        okButton.setText("Button");
        contentPanel.add(okButton, new GridConstraints(3, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        contentPanel.add(spacer1, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        selectPlaylistLabel = new JLabel();
        selectPlaylistLabel.setText("Label");
        contentPanel.add(selectPlaylistLabel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        playlistList = new JComboBox();
        contentPanel.add(playlistList, new GridConstraints(1, 0, 1, 3, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer2 = new Spacer();
        contentPanel.add(spacer2, new GridConstraints(2, 0, 1, 3, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return contentPanel;
    }

    @FunctionalInterface
    public interface onPlaylistSelected {
        void playlistSelected(String uri);
    }

    public SelectPlaylist(onPlaylistSelected selected) throws IOException {
        super();
        selectPlaylistLabel.setText(PublicValues.language.translate("selectplaylist.dialog.description"));
        selectPlaylistLabel.setForeground(PublicValues.globalFontColor);

        okButton.setText(PublicValues.language.translate("selectplaylist.dialog.ok"));
        okButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (playlistList.getSelectedIndex() != -1)
                    selected.playlistSelected(uris.get(playlistList.getSelectedIndex()));
                dispose();
            }
        });
        okButton.setEnabled(false);

        cancelButton.setText(PublicValues.language.translate("selectplaylist.dialog.cancel"));
        cancelButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                loadplaylists = false;
                dispose();
            }
        });

        uris = new ArrayList<>();
        DefaultComboBoxModel<String> playlistsModel = new DefaultComboBoxModel<>();
        playlistList.setModel(playlistsModel);
        playlistList.setRenderer(new DefaultListCellRenderer() {
            @Override
            public Component getListCellRendererComponent(JList<?> list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
                Component component = super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
                component.setForeground(PublicValues.globalFontColor);
                return component;
            }
        });
        playlistList.setForeground(PublicValues.globalFontColor);
        playlistList.setEnabled(false);

        new Thread(() -> {
            try {
                int limit = 50;
                Paging<PlaylistSimplified> playlists = InstanceManager.getSpotifyApi().getListOfCurrentUsersPlaylists()
                        .limit(limit)
                        .build().execute();
                int total = playlists.getTotal();
                int offset = 0;
                while (offset < total) {
                    if (!loadplaylists) break;
                    for (PlaylistSimplified playlist : playlists.getItems()) {
                        if (!playlist.getOwner().getId().equals(PublicValues.session.username())) {
                            total--;
                            continue;
                        }
                        uris.add(playlist.getUri());
                        playlistsModel.addElement(playlist.getName());
                    }
                    offset += limit;
                    playlists = InstanceManager.getSpotifyApi().getListOfCurrentUsersPlaylists()
                            .limit(limit)
                            .offset(offset)
                            .build().execute();
                }
                okButton.setEnabled(true);
            } catch (IOException e) {
                ConsoleLogging.Throwable(e);
                dispose();
            }
            playlistList.setEnabled(true);
            setSize(new Dimension(playlistList.getSize().width + 20, getHeight()));
        }, "Load playlists").start();
    }

    public void open() {
        setMinimumSize(new Dimension(262, 128));
        add(contentPanel);
        getRootPane().setDefaultButton(okButton);
        setModal(true);
        setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
        addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                dispose();
            }
        });
        setTitle(PublicValues.language.translate("selectplaylist.dialog.title"));
        pack();
        setVisible(true);
    }
}
